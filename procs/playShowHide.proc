# Show Hide Answers
# ========================
# Written for Praat 6.0.40

# script by Antoin Eoin Rodgers
# rodgeran@tcd.ie
# Phonetics and speech Laboratory, Trinity College Dublin
# March 1, 2020

# This script is designed student to let students do various tasks involving
# speech, waveform, and spectrogram analysis as well as  textgrid annotation.
#
# It presents the user with each .wav / .TextGrid pairing in the .directory$
# directory.
#
# The user can "show / hide" answers, and move forward or backwards through
# the files. Textgrids are automaticaly saved on each button click.
#
#  If there is a tier called  "answers" or "comments" it is automatically
#  hidden by default.

procedure playShowHide: .directory$, .listenRepeat
    ### GET LIST OF SOUND AND TEXT GRID FILES
    # get list of wave files
    .soundListTemp = Create Strings as file list:
        ... "fileList",
        ... .directory$ + "*.wav"
    .numSounds = Get number of strings
    # get list of file names without suffix
    Replace all: ".wav", "", 0, "literals"
    Rename: "sounds"
    .soundList = selected ()
    .numSounds = Get number of strings
    selectObject: .soundListTemp
    Remove

    # get list of textgrids in target file
    .textgridFileList = Create Strings as file list:
        ... "textgrids",
        ... .directory$ + "*.textgrid"
    .textgridListTemp1 = selected ()
    Replace all: ".TextGrid", "", 0, "literals"
    .textgridListTemp2 = selected ()
    Rename: "textgrids"
    .textgridList = To WordList
    selectObject: .textgridListTemp1
    plusObject: .textgridListTemp2
    Remove

    # set up show / hide flags and strings
    .showAns = 0
    .showAns$[1] = "Show answer"
    .showAns$[2] = "Hide answer"
    .listenedAlready = 0


   # main loop
    for .curSound to .numSounds

        selectObject: .soundList
        .soundName$ = Get string: .curSound

        #edit textgrid if it exists
        selectObject: .textgridList
        .textgridExists = Has word: .soundName$
        if .textgridExists
            .soundObject = Read from file: .directory$ + .soundName$ + ".wav"
            Scale intensity: 70

            .textgrid = Read from file: .directory$ + .soundName$ + ".TextGrid"

            if .listenRepeat and not .listenedAlready
                @listenRepeat: .soundObject
                .listenedAlready = 1
            endif

            # remove tiers for temporary textgrid, if any have been specified
            if not .showAns
                @temp_textgrid: "playShowHide.textgrid", "answer comments"
                selectObject: temp_textgrid.object
                plusObject: .soundObject
            else
                selectObject: .textgrid
                plusObject: .soundObject
            endif

            Edit
            # pause to let user edit the text grid
            beginPause: "Showing " + .soundName$
            comment: "Play, listen, and write your transcription."
            .editChoice = endPause: .showAns$[.showAns + 1], "<", ">", 4, 1

            # Merged textgrid if necessary, and save it.
            if not .showAns
                @merge_textgrids
            endif
            selectObject: .textgrid
            Save as text file: .directory$ + .soundName$ + ".TextGrid"

            # Process user input.
            if .editChoice = 3
                .showAns = 0
                .listenedAlready = 0
            elsif .editChoice = 2  and .curSound > 1
                .curSound -= 2
                .showAns = 0
                .listenedAlready = 0
            else
                .curSound -= 1
                .showAns = 1 - .showAns
                .listenedAlready = 1
            endif

            # Remove current sound object and textgrid.
            selectObject: .textgrid
            plusObject: .soundObject
            Remove
        endif
    endfor
    # Remove remaining objects.
    selectObject: .soundList
    plusObject: .textgridList
    Remove
endproc

# Dependent Procedures --------------------------------------------------------v
procedure listenRepeat: .soundObject
    .plxRepeat = 1
    selectObject: .soundObject
    .soundName$ = selected$("Sound")
    while .plxRepeat
        beginPause: "Sound: " + .soundName$
        comment: "Listen to the phrase"
        .plxRepeat = endPause: "Play", "Next", 1, 1
        .plxRepeat = -.plxRepeat + 2
        if .plxRepeat
            selectObject: .soundObject
            Play
        endif
    endwhile
endproc

procedure temp_textgrid: .original$, .delete_list$
    # convert .delete_list$ to array of tiers to delete
    # (.delete$[.n] with .n elements)

    .list_length = length(.delete_list$)
    .n = 1
    .prev_start = 1
    for .i to .list_length
        .char$ = mid$(.delete_list$, .i, 1)
        if .char$ = " "
            .delete$[.n] = mid$(.delete_list$, .prev_start, .i - .prev_start)
            .n += 1
            .prev_start = .i + 1
        endif

        if .n = 1
            .delete$[.n] = .delete_list$
        else
            .delete$[.n] = mid$(.delete_list$,
                            ... .prev_start,
                            ... .list_length - .prev_start + 1)
        endif
    endfor

    # create a copy of '.original$' and delete target tiers
    selectObject: '.original$'
    .num_tiers = Get number of tiers
    .name$ = selected$("TextGrid")
    .name$ += "_temp"
    Copy: .name$
    .object = selected ()
    for .i to .num_tiers
        .cur_tier = .num_tiers + 1 - .i
        .name_cur$ = Get tier name: .cur_tier
        for .j to .n
            if .delete$[.j] = .name_cur$
                Remove tier: .cur_tier
            endif
        endfor
    endfor
endproc

procedure merge_textgrids
    ### get number of and list of original and temporary tiers
    selectObject: temp_textgrid.object
    .temp_n_tiers = Get number of tiers
    for .i to .temp_n_tiers
        .temp_tier$[.i] = Get tier name: .i
    endfor
    selectObject: 'temp_textgrid.original$'
    .orig_n_tiers = Get number of tiers
    .name$ = selected$("TextGrid")
    for .i to .orig_n_tiers
        .orig_tier$[.i] = Get tier name: .i
    endfor

    ### create 1st tier of merged tier
    selectObject: 'temp_textgrid.original$'
    Extract one tier: 1
    .new = selected()
    if .orig_tier$[1] = .temp_tier$[1]
        selectObject: temp_textgrid.object
        Extract one tier: 1
        .temp_single_tier = selected ()
        plusObject: .new
        Merge
        .newNew =selected()
        Remove tier: 1
        selectObject: .temp_single_tier
        plusObject: .new
        Remove
        .new = .newNew
    endif

    ### merge tiers 2 to .orig_n_tiers
    for .i from 2 to .orig_n_tiers
        .useTemp = 0
        for .j to .temp_n_tiers
            if .orig_tier$[.i] =  .temp_tier$[.j]
                .useTemp = .j
            endif
        endfor
        if .useTemp
            selectObject: temp_textgrid.object
            Extract one tier: .useTemp

        else
            selectObject: 'temp_textgrid.original$'
            Extract one tier: .i
        endif
        .temp_single_tier = selected ()
        plusObject: .new
        Merge
        .newNew =selected()
        selectObject: .temp_single_tier
        plusObject: .new
        Remove
        .new = .newNew
    endfor
    selectObject: 'temp_textgrid.original$'
    plusObject: temp_textgrid.object
    Remove
    'temp_textgrid.original$' = .new
    selectObject: 'temp_textgrid.original$'
    Rename: .name$
endproc
